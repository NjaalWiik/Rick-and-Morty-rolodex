{"version":3,"sources":["components/card/Card.jsx","components/cardList/CardList.jsx","components/searchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","char","className","alt","src","image","name","species","status","origin","CardList","characters","map","key","id","SearchBox","placeholder","onChange","type","App","useState","setCharacters","search","setSearch","useEffect","tempData","i","fetch","then","res","json","data","push","results","merged","concat","apply","filteredCharacters","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oTAeeA,G,kBAZF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,YAAYC,IAAKH,EAAKI,QAC/B,4BAAKJ,EAAKK,MACV,+CAAiBL,EAAKM,UACtB,8CAAgBN,EAAKO,SACrB,8CAAgBP,EAAKQ,OAAOH,UCGnBI,EARE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACE,yBAAKT,UAAU,aACZS,GAAcA,EAAWC,KAAI,SAAAX,GAAI,OAAI,kBAAC,EAAD,CAAMY,IAAKZ,EAAKa,GAAIb,KAAMA,SCQvDc,G,MAbG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAChC,OACE,6BACE,2BACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbC,SAAUA,OCgCHE,MApCf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNT,EADM,KACMU,EADN,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,KAIbC,qBAAU,WAER,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,GAAK,GAAIA,IACvBC,MAAM,kDAAD,OAAmDD,IACrDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAASO,KAAKD,EAAKE,YAChCL,MAAK,WACJ,IAAIM,EAAS,GAAGC,OAAOC,MAAM,GAAIX,GACjCJ,EAAca,QAGnB,IAEH,IAAMG,EAAqB1B,EAAW2B,QACpC,SAAArC,GAAI,OACFA,EAAKK,KAAKiC,cAAcC,SAASlB,IACjCrB,EAAKM,QAAQgC,cAAcC,SAASlB,IACpCrB,EAAKO,OAAO+B,cAAcC,SAASlB,IACnCrB,EAAKQ,OAAOH,KAAKiC,cAAcC,SAASlB,MAK5C,OACE,yBAAKpB,UAAU,OACb,sDACA,kBAAC,EAAD,CAAWe,SALE,SAAAwB,GAAC,OAAIlB,EAAUkB,EAAEC,OAAOC,MAAMJ,gBAKZvB,YAAY,0BAC3C,kBAAC,EAAD,CAAUL,WAAY0B,MCzBRO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07f1e3b7.chunk.js","sourcesContent":["import React from 'react';\nimport './Card_style.css';\n\nconst Card = ({ char }) => {\n  return (\n    <div className='card-container'>\n      <img alt='Character' src={char.image}></img>\n      <h2>{char.name}</h2>\n      <h4>{`Species: ${char.species}`}</h4>\n      <h4>{`Status: ${char.status}`}</h4>\n      <h4>{`Origin: ${char.origin.name}`}</h4>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './CardList_style.css';\n\nimport Card from '../card/Card';\n\nconst CardList = ({ characters }) => {\n  return (\n    <div className='card-list'>\n      {characters && characters.map(char => <Card key={char.id} char={char} />)}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox_style.css';\n\nconst SearchBox = ({ placeholder, onChange }) => {\n  return (\n    <div>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport CardList from './components/cardList/CardList';\nimport SearchBox from './components/searchBox/SearchBox';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    const tempData = [];\n    for (let i = 1; i <= 34; i++) {\n      fetch(`https://rickandmortyapi.com/api/character?page=${i}`)\n        .then(res => res.json())\n        .then(data => tempData.push(data.results))\n        .then(() => {\n          let merged = [].concat.apply([], tempData);\n          setCharacters(merged);\n        });\n    }\n  }, []);\n\n  const filteredCharacters = characters.filter(\n    char =>\n      char.name.toLowerCase().includes(search) ||\n      char.species.toLowerCase().includes(search) ||\n      char.status.toLowerCase().includes(search) ||\n      char.origin.name.toLowerCase().includes(search)\n  );\n\n  const onChange = e => setSearch(e.target.value.toLowerCase());\n\n  return (\n    <div className='App'>\n      <h1>Rick and Morty Rolodex</h1>\n      <SearchBox onChange={onChange} placeholder='search for characters' />\n      <CardList characters={filteredCharacters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}